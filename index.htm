<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Network Visualizer</title>
    <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg-color: #f9f9f9;
            --node-bg-color: #007bff;
            --toolbar-bg-color: #292483;
            --toolbar-txt-color: black;
            --node-text-color: white;
            --line-color: black;
        }

        [data-theme="dark"] {
            --bg-color: #1e1e1e;
            --node-bg-color: #4caf50;
            --toolbar-bg-color: #9895da;
            --toolbar-txt-color: white;
            --node-text-color: white;
            --line-color: white;
        }

        body {
            margin: 0; 
            font-family: 'IBM Plex Mono', Arial, sans-serif; /* Set IBM Plex as default font */
            background-color: var(--bg-color);
            color: var(--node-text-color);
        }

        #network-container,
        .node,
        #toolbar,
        #connections-display,
        #toolbar button {
            font-family: 'IBM Plex Sans', Arial, sans-serif; /* Ensure all elements use the font */
        }

        #network-container {
            position: relative;
            width: 100vw;
            height: calc(100vh - 50px);
            background-color: var(--bg-color);
            border: 1px solid #ccc;
        }
        .node {
            position: absolute;
            width: 120px;
            padding: 10px;
            background-color: var(--node-bg-color);
            color: var(--node-text-color);
            text-align: center;
            border-radius: 8px;
            cursor: grab;
            user-select: none;
        }
        .dropdown {
            margin-top: 10px;
            background-color: white;
            color: black;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 4px;
            cursor: pointer;
        }
        svg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        line {
            stroke: var(--line-color);
            stroke-width: 2;
        }
        #toolbar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
            background-color: var(--toolbar-bg-color);
            color: var(--node-text-color);
        }
        #toolbar button {
            padding: 8px 16px;
            background-color: var(--bg-color);
            color: var(--toolbar-txt-color);
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }
        #toolbar button:last-child {
            margin-right: 0;
        }
        #connections-display {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: var(--bg-color);
            color: var(--toolbar-txt-color);
            border: 1px solid #ccc;
            padding: 20px;
            border-radius: 8px;
            z-index: 10;
        }
    </style>
</head>
<body data-theme="dark">
    <div id="toolbar">
        <button id="new-node">New Node</button>
        <button id="show-connections">Show Connections</button>
        <button id="delete-node">Delete Node</button>
        <button id="delete-connection">Delete Connection</button>
        <button id="theme-toggle">Toggle Theme</button>
    </div>
    <div id="network-container">
        <svg id="connection-lines"></svg>
        <!-- Example Nodes -->
        <div class="node" id="router" style="top: 50px; left: 50px;" data-type="router">Router</div>
        <div class="node" id="pc1" style="top: 200px; left: 200px;" data-type="pc">PC 1</div>
        <div class="node" id="server" style="top: 350px; left: 100px;" data-type="server">Server</div>
    </div>
    <div id="connections-display">
        <h3>Connections</h3>
        <ul id="connections-list"></ul>
        <button id="close-connections">Close</button>
    </div>

    <script>
        const container = document.getElementById('network-container');
        const svg = document.getElementById('connection-lines');
        const themeToggle = document.getElementById('theme-toggle');
        const newNodeButton = document.getElementById('new-node');
        const showConnectionsButton = document.getElementById('show-connections');
        const deleteNodeButton = document.getElementById('delete-node');
        const deleteConnectionButton = document.getElementById('delete-connection');
        const connectionsDisplay = document.getElementById('connections-display');
        const connectionsList = document.getElementById('connections-list');
        const closeConnectionsButton = document.getElementById('close-connections');

        let selectedNode = null; // For moving nodes
        let connectionCandidate = null; // For managing connections
        let deleteMode = false;
        let connections = [];

        // Enable dragging for nodes
        container.addEventListener('mousedown', (e) => {
            if (e.target.classList.contains('node')) {
                selectedNode = e.target;
                selectedNode.style.cursor = 'grabbing';
            }
        });

        container.addEventListener('mousemove', (e) => {
            if (selectedNode) {
                const rect = container.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                selectedNode.style.left = `${x - selectedNode.offsetWidth / 2}px`;
                selectedNode.style.top = `${y - selectedNode.offsetHeight / 2}px`;
                updateConnections();
            }
        });

        container.addEventListener('mouseup', () => {
            if (selectedNode) {
                selectedNode.style.cursor = 'grab';
                selectedNode = null;
            }
        });

        // Connect nodes on double-click
        container.addEventListener('dblclick', (e) => {
            if (deleteMode && e.target.classList.contains('node')) {
                // Delete Node Mode
                container.removeChild(e.target);
                connections = connections.filter(conn => conn.start !== e.target.id && conn.end !== e.target.id);
                updateConnections();
                deleteMode = false;
                return;
            }

            if (e.target.classList.contains('node')) {
                if (!connectionCandidate) {
                    connectionCandidate = e.target;
                    connectionCandidate.style.border = '2px solid #00ff00'; // Highlight the first node
                } else {
                    const startNode = connectionCandidate;
                    const endNode = e.target;

                    if (startNode !== endNode) {
                        createConnection(startNode, endNode); // Create the connection
                    }

                    // Reset selection
                    startNode.style.border = 'none';
                    connectionCandidate = null;
                }
            }
        });

        // Create a connection line
        function createConnection(startNode, endNode) {
            const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
            line.setAttribute('data-start', startNode.id);
            line.setAttribute('data-end', endNode.id);
            svg.appendChild(line);
            connections.push({ start: startNode.id, end: endNode.id });
            updateConnections();
        }

        // Update connection lines based on node positions
        function updateConnections() {
            connections.forEach(conn => {
                const startNode = document.getElementById(conn.start);
                const endNode = document.getElementById(conn.end);

                const startRect = startNode.getBoundingClientRect();
                const endRect = endNode.getBoundingClientRect();
                const containerRect = container.getBoundingClientRect();

                const x1 = startRect.left + startRect.width / 2 - containerRect.left;
                const y1 = startRect.top + startRect.height / 2 - containerRect.top;
                const x2 = endRect.left + endRect.width / 2 - containerRect.left;
                const y2 = endRect.top + endRect.height / 2 - containerRect.top;

                const line = svg.querySelector(`line[data-start="${conn.start}"][data-end="${conn.end}"]`);
                if (line) {
                    line.setAttribute('x1', x1);
                    line.setAttribute('y1', y1);
                    line.setAttribute('x2', x2);
                    line.setAttribute('y2', y2);
                }
            });
        }

        // Theme toggle functionality
        themeToggle.addEventListener('click', () => {
            document.body.dataset.theme = document.body.dataset.theme === 'dark' ? '' : 'dark';
        });

        // Add new node functionality
        newNodeButton.addEventListener('click', () => {
            const newNode = document.createElement('div');
            newNode.className = 'node';
            newNode.textContent = `Node ${document.querySelectorAll('.node').length + 1}`;
            newNode.style.top = '100px';
            newNode.style.left = '100px';
            container.appendChild(newNode);
        });

        // Show connections functionality
        showConnectionsButton.addEventListener('click', () => {
            connectionsList.innerHTML = '';
            connections.forEach(conn => {
                const li = document.createElement('li');
                li.textContent = `${conn.start} â†” ${conn.end}`;
                connectionsList.appendChild(li);
            });
            connectionsDisplay.style.display = 'block';
        });

        // Close connections display
        closeConnectionsButton.addEventListener('click', () => {
            connectionsDisplay.style.display = 'none';
        });

        // Delete node functionality
        deleteNodeButton.addEventListener('click', () => {
            deleteMode = true;
        });

        // Delete connection functionality
        deleteConnectionButton.addEventListener('click', () => {
            const nodeIds = Array.from(new Set(connections.flatMap(conn => [conn.start, conn.end])));
            const select = document.createElement('select');
            select.id = 'delete-connection-select';
            nodeIds.forEach(id => {
                const option = document.createElement('option');
                option.value = id;
                option.textContent = id;
                select.appendChild(option);
            });
            const confirmButton = document.createElement('button');
            confirmButton.textContent = 'Delete Connection';

            confirmButton.addEventListener('click', () => {
                const selectedNodeId = select.value;
                connections = connections.filter(conn => conn.start !== selectedNodeId && conn.end !== selectedNodeId);
                updateConnections();
                container.removeChild(select);
                container.removeChild(confirmButton);
            });

            container.appendChild(select);
            container.appendChild(confirmButton);
        });
    </script>
</body>
</html>
